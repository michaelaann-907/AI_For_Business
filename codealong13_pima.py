# -*- coding: utf-8 -*-
"""CodeAlong13_Pima.ipynb

Automatically generated by Colab.


"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('diabetes.csv')

df.head()

df.columns

df.shape

"""768 rows, 9 columns"""

df.info()

df.isnull().values.sum

df.describe

sns.pairplot(df)

from sklearn.model_selection import train_test_split

X=df[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'DiabetesPedigreeFunction', 'Age']]

y=df['Outcome']

X

y

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.1, random_state=55)

y_train

X_test

77/768

#Apply deep learning

!pip install tensorflow

from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential

#create model
model = Sequential()

# Add output layer
model.add(Dense(units=1, activation='sigmoid'))

# Compile the model
model =Sequential()

#hidden layers
model.add(Dense(10, activation='relu')),
model.add(Dense(16, activation='relu')),
model.add(Dense(32, activation='relu')),
model.add(Dense(64, activation='relu')),
#output layer
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics='accuracy')

# Train the model
model.fit(X_train,y_train, validation_data=(X_test,y_test), epochs=15, batch_size=10)

# Evaluate the model
model.evaluate(X_test,y_test)

