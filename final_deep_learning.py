# -*- coding: utf-8 -*-
"""Final_Deep_Learning.ipynb

Automatically generated by Colab.


"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('house_data.csv')

df.head()

df.info

df.isnull().values.sum

df.isnull().sum()

sns.pairplot(df)

df.columns

# drop some unnecessary columns
df  = df.drop('date',axis=1)
df = df.drop('id',axis=1)
df = df.drop('zipcode',axis=1)

df.columns

X = df.drop('price', axis=1)
y = df['price']

X

y

import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Data preprocessing
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Model architecture
model = keras.Sequential([
    keras.layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(1)  # Output layer for regression
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train / Fit the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
mse = model.evaluate(X_test, y_test)
print(f'Mean Squared Error: {mse}')

# Make predictions
predictions = model.predict(X_test)

predictions

import matplotlib.pyplot as plt

# Assuming 'y_test' contains actual prices and 'predictions' contains predicted prices

plt.scatter(y_test, y_test, color='blue', label='Actual Prices')  # Actual prices in blue
plt.scatter(y_test, predictions, color='red', label='Predicted Prices')  # Predicted prices in red

plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.legend()  # Show legend for color labels
plt.show()

from sklearn.metrics import mean_squared_error, r2_score

# Evaluate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Evaluate R-squared
r2 = r2_score(y_test, predictions)
print(f'R-squared: {r2}')

