# -*- coding: utf-8 -*-
"""Assignment4.ipynb

Automatically generated by Colab.


Please complete Exploratory data analysis (EDA), apply machine learning and deep learning to predict car prices from following cars dataset.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('cars.csv')

df.head()

df.columns

df.shape

df.info()

!pip install tensorflow

from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential, load_model
import tensorflow as tf

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Assuming 'price' is the target variable
X = df.drop('Price', axis=1)
y = df['Price']

# Handle missing values if any
X.fillna(0, inplace=True)  # Replace NaN values with 0

# Encode categorical variables
X = pd.get_dummies(X, drop_first=True)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize numerical features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))  # Assuming a regression problem (predicting price)

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

# Display the model summary
model.summary()

# Assuming 'epochs' and 'batch_size' values
epochs = 50
batch_size = 32

history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=0.2)

# Evaluate the model on the test set
loss, mae = model.evaluate(X_test, y_test)
print(f'Test Mean Absolute Error: {mae}')

# Plot training history
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.show()

# Make predictions on the test set
predictions = model.predict(X_test)