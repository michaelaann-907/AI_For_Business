# -*- coding: utf-8 -*-
"""CodeAlong14.ipynb

Automatically generated by Colab.


"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

!pip install tensorflow

from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential, load_model

import tensorflow as tf

mnist=tf.keras.datasets.mnist
(train_images, train_labels), (test_images, test_labels)= mnist.load_data()

train_images.shape

test_images.shape

plt.imshow(train_images[7], cmap='gray')

plt.imshow(train_images[-1], cmap='gray')

train_labels[-1]

train_labels

train_images[-1].shape

#Normalization/Standardization
train_images=train_images/255.0
test_images=test_images/255.0

from tensorflow.keras.layers import InputLayer, Reshape, MaxPooling2D, Flatten

from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Reshape
from tensorflow.keras.models import Sequential

model = Sequential()
model.add(Input(shape=(28, 28, 1)))
model.add(Reshape(target_shape=(28, 28, 1)))
model.add(Conv2D(filters=12, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(10))

model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), optimizer='adam', metrics='accuracy')

model.fit(train_images, train_labels, validation_split=0.2, epochs=5)

accuracy=model.evaluate(test_images, test_labels)