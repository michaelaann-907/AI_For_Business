"""CodeAlong3.ipynb

Automatically generated by Colab.

NumPy https://numpy.org/

September 11, 2023
"""

import numpy as np

arr = np.arange(0, 11)
arr

arr[3]

arr[5:]

arr[1:5]

arr[:3]  # 0-2 / includes first 3

# Broadcasting Reassignment
arr

arr[0:5] = 100  # change 1-5 (0-4)  to 100
arr

arr = np.arange(0, 11)
arr

slice_arr = arr[0:5]
slice_arr

slice_arr[:] = 80
slice_arr

arr

# if we want to not to affect the original array use the following:
arr_copy = arr.copy()
arr_copy[:] = 100
arr_copy

arr

"""2D ARRAYS"""

# For 1D have 1 set of brackets []
# For 2D have 2 sets of brackets [[]]

arr_2d = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]])
arr_2d

arr_2d.shape

arr_2d[0]

arr_2d[2]

arr_2d[0, 1]

arr_2d[2, 2]

arr_2d[:2]  # take everything (all rows) up to 2

arr_2d[:3, :1]

# Challenge 1 - Get the entire last row
arr_2d[:3, 2:]  # start from row 3, from the right side (don't include anything on the left side)

# Challenge 2 - Get the entire middle column
arr_2d[:3, 1:2]  # - Start from row 3, from (start from the second row (1), leave out row 3 (:2))
# index # is 1, 1:2 (start from 1 and end at 2 but don't include 2)

# Challenge 3 - Get the entire middle row (2nd row) = 20, 25, 30
arr_2d[1:2]
# or
arr_2d[1:2, 0:3]

# Continual Selection
arr = np.arange(1, 11)
arr

arr > 5

bool_arr = arr > 5
bool_arr

arr[bool_arr]

arr[arr > 5]

# NumPy operations
arr = np.arange(0, 15)
arr

arr + 7

arr - 7

arr + arr  # add array to itself

arr * arr  # array multiply array

arr - arr

arr / arr

1 / arr

np.sqrt(arr)

np.sin(arr)

np.log(arr)

arr.sum()

arr.mean()

arr.var()

arr.std()

arr.max()

arr_2d = np.arange(0, 25)
arr_2d

# Creating a 2d array & reshaping into a 5 x 5 Matrix
arr_2d = np.arange(0, 25).reshape(5, 5)
arr_2d

arr_2d.sum()

# sum across the rows
arr_2d.sum(axis=0)

# sum across the columns
arr_2d.sum(axis=1)
