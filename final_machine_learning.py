# -*- coding: utf-8 -*-
"""Final_Machine_Learning.ipynb

Automatically generated by Colab.


"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('house_data.csv')

df.columns

df.isnull().sum()

# drop some unnecessary columns
df  = df.drop('date',axis=1)
df = df.drop('id',axis=1)
df = df.drop('zipcode',axis=1)

df.columns

X = df.drop('price', axis=1)
y = df['price']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model training
model = LinearRegression()

model.fit(X_train_scaled, y_train)

# Model evaluation
predictions_train = model.predict(X_train_scaled)
predictions_test = model.predict(X_test_scaled)

mse_train = mean_squared_error(y_train, predictions_train)
rmse_train = np.sqrt(mse_train)

mse_test = mean_squared_error(y_test, predictions_test)
rmse_test = np.sqrt(mse_test)

r2_train = r2_score(y_train, predictions_train)
r2_test = r2_score(y_test, predictions_test)

print(f'Training RMSE: {rmse_train:.2f}')
print(f'Testing RMSE: {rmse_test:.2f}')
print(f'Training R^2 Score: {r2_train:.2f}')
print(f'Testing R^2 Score: {r2_test:.2f}')

# Plotting predictions vs. actual values for the test set
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=predictions_test, color='blue', label='Actual')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red', label='Predicted')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs. Predicted Prices (Test Set)')
plt.legend()
plt.show()

# Print actual and predicted values side by side
comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': predictions_test})
print(comparison_df)