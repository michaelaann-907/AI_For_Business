# -*- coding: utf-8 -*-
"""Copy of CodeAlong11.ipynb

Automatically generated by Colab.


"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('salespredict.csv')

df.head()

import warnings
warnings.filterwarnings ('ignore')

df=df.fillna(df.mean())

df.info()

"""common way to count the number of missing (null) values in a DataFrame in Python using a library like Pandas. Here's what it does step by step:

df is assumed to be a Pandas DataFrame.
df.isnull() creates a DataFrame of the same shape as df, but with Boolean values indicating whether each element in df is null (True) or not null (False).
df.isnull().values converts this DataFrame of Boolean values into a NumPy array.
.sum() is called on this NumPy array, which sums up all the True values (missing values) since in Python, True is treated as 1 and False as 0.
"""

df.isnull().values.sum()

df['Influencer'].isnull().values.any()
#checks if there are any missing (null) values
#in the 'Influencer' column of a Pandas DataFrame, and it returns a Boolean value.

df['TV'].isnull().values.any()

df

X=df.drop(['Sales', 'Influencer'], axis=1)

X

y=df['Sales']

y

""" function from scikit-learn (often abbreviated as sklearn) is used to split a dataset into training and testing sets for machine learning model training and evaluation."""

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, random_state= 25)

X_train

X_test

y_train

y_test

len(X_train)

from sklearn.linear_model import LinearRegression

sales_model=LinearRegression()

sales_model.fit(X_train, y_train)

y_predictions=sales_model.predict(X_test)
y_predictions

from sklearn.metrics import mean_absolute_error, mean_squared_error

df['Sales'].mean()

sns.histplot(data=df, x='Sales')

sns.histplot(data=df, x='Sales', bins=25)

MAE=mean_absolute_error(y_test,y_predictions)
MAE

MSE=mean_squared_error(y_test,y_predictions)
MSE

RMSE=np.sqrt(mean_squared_error(y_test,y_predictions))
RMSE

model_final=LinearRegression()

model_final.fit(X,y)

model_final.coef_

X.head()

#Deploy Model
from joblib import dump,load

dump(model_final, 'sales_predict_model.joblib')

model_loaded=load('sales_predict_model.joblib')

model_loaded.coef_

X.shape

#new_campaign_prediction=[[25,30,15]]
#new_campaign_prediction=[[25,30,150]]
new_campaign_prediction=[[75,30,15]]

model_loaded.predict(new_campaign_prediction)

