# -*- coding: utf-8 -*-
"""Copy of CodeAlong4_5_6Pandas.ipynb

Automatically generated by Colab.



# Pandas

https://pandas.pydata.org/


Pandas is a Python library for data manipulation and analysis, particularly well-suited for working with structured data like tables and spreadsheets.
"""

import numpy as np
import pandas as pd

my_idx = ["NY", "CA", "NC"] # creating an index

my_data=[15,25,10] #population

type(my_data)

"""A Pandas Series is a one-dimensional labeled array-like data structure provided by the Pandas library in Python. It is similar to a column in a spreadsheet or a single column in a SQL table. Each element in a Series can hold data of any data type, including numbers, strings, and even more complex objects."""

my_series=pd.Series(data=my_data) # convert list to pandas series
my_series

type(my_series)

my_series=pd.Series(data=my_data, index=my_idx)
my_series

my_series["NC"]

my_series[2] # can access NC with the index number as well // index is 2

"""0 NY 15

1 CA 25

2 NC 10
"""

# Dictionary of 3 Stocks
stocks={"AAPL":178.25, "NVDA":455.20, "CSO":56.17}

type(stocks)

stock_series=pd.Series(stocks)
stock_series

type(stock_series)

stock_series['AAPL']

stock_series[0]

#Quarterly Sales $Million // Use curly brackets
q1={'AAPL':200, 'NVDA':80, 'CSC':150}
q2={'AMZN':270, 'NVDA':70, 'CSCO':175}

type(q1)

sales_q1=pd.Series(q1)
sales_q2=pd.Series(q2)

print('Type for q1 :',type(q1))
print('Type for q2:',type(q2))

sales_q1[0]

sales_q1

sales_q2

sales_q1.keys()

#BROADCASTING
sales_q1*2

sales_q2/100

sales_q1+sales_q2

sales_q1.add(sales_q2,fill_value=0)

# DATA FRAMES
import numpy as np
import pandas as pd

np.random.seed(55)
ran_num=np.random.randint(100,301,(4,3))
ran_num

my_idx=['APPL', 'AMZN', 'NVDA', 'CSCO']
# index is left side of data frame

# for columns (oct,nov,dec)
my_col=['Oct', 'Nov', 'Dec']

# data frame
df=pd.DataFrame(ran_num)
df

type(df)

# turn row 0,1,2,3 / index = my reference - what i want to change it to
df=pd.DataFrame(data=ran_num, index=my_idx)
df

df=pd.DataFrame(data=ran_num, index=my_idx, columns=my_col)
df

df.info()

pwd

cd sample_data/

pwd

#READ FILES
df=pd.read_csv('GoogleStock.csv')
df

df.info()

df.head()

#last five
df.tail()

#COLUMNS
df['High']

df[['High', 'Low']]

df['Open']+df['Close']

df.head()

#compare morning with evening sales
((df['Close']-df['Open'])/df['Open'])*100

# add this as a column to existing columns
df['daily_pc']= ((df['Close']-df['Open'])/df['Open'])*100

df.head()

# WORKING WITH ROWS
df.index

df.set_index('Date')

df.head()

df.set_index('Date')

df.reset_index()

df.set_index("Date", inplace=True)
df.head()

# integer-based, give us first row
# depends on knowing the actual location of the index value
df.iloc[0]

# gives first two rows
df.iloc[0:2]

# string labeled, name based index
# it depends on knowing label
df.loc['8/19/2004']

# first two rows based on label index
df.loc[['8/19/2004', '8/20/2004']]

df.drop('8/19/2004', inplace=True)
df.head()

# it would be the 8/20/2004
new_row=df.iloc[0]
new_row

df

df.head()

df.append(new_row)

# FILTERING
df['Open']>100

bool_series=df['Open']>100
df[bool_series]

df.loc['2/19/2021']

df.loc[['2/19/2021', '2/3/2021']]

# second way instead of assigning to bool variable
# pass dataframe into the dataframe
df[df['Open']>100]

# MULTIPLE CONDITIONS
df['Open']>100                # first condition
df['Volume']==97882000        # second condition

# AND:
# Both conditions needs to be True
df[(df['Open']>100)&(df['Volume']==97882000)]

# OR:
# Either condition needs to be True
df[(df['Open']>100)|(df['Volume']==97882000)]

# APPLY METHODS
df.info()

#97882000[0]

# need to turn to string to access
str(97882000)[0]

# get last two digits
str(97882000)[-2:]

def last_two(num):
  return str(num)[-2:]

last_two(9788217989)

df['Volume'].apply(last_two)

# create new column based on last two numbers
df['Last Two']=df['Volume'].apply(last_two)

df

df['Volume'].mean()

# If it is less than mean value $
# If it is between mean value and 153031520 $$
# If more than 153031520 $$$

def vol(num):
  if num<123031520:
    return '$'
  elif 123031520<= num<=153031520:
    return '$$'
  else:
    return '$$$'

df['Volume'].apply(vol)

df['Volume in $']=df['Volume'].apply(vol)

df

# APPLY TO MULTIPLE COLUMNS
def average(a,b):
  return(a+b)/2

# replace def with lambda
# remove return and () with parameters
#bring everything to one line
lambda average:(a+b)/2

df[['High', 'Low']].apply(lambda df:average(df['High'], df ['Low']), axis=1)

df['Daily Average']=df[['High', 'Low']].apply(lambda df:average(df['High'], df ['Low']), axis=1)

df.head()

# STATISTICS
df.describe()

df.describe().transpose()

df.sort_values('Open')

df.sort_values('Open',ascending=False)

df.sort_values(['Open', 'High'])

df['Open'].max()

df['Open'].idxmax()

df.loc['2/2/2022']

df.corr()

df.head()

df['Volume in $'].value_counts()

df['Volume in $'].unique()

# Replace Method
df['Volume in $']=df['Volume in $'].replace('$$$', "***")

df.head()

df['Volume in $']=df['Volume in $'].replace(['$$$','$$','$'], ["***",'**','*'])

df.head()

volumemap={'***':'$$$','**':'$$','*':'$'}

df['Volume in $'].map(volumemap)

df['Volume in $']=df['Volume in $'].map(volumemap)

df.head()

# working w duplicates
new_df=pd.DataFrame([3,5,5],['x','y','z'])
new_df

new_df.duplicated()

new_df=pd.DataFrame([3,5,5,7,3,9,9],['x','y','z','a','b','c','d'])
new_df

new_df.duplicated()

new_df.duplicated().sum()

new_df=new_df.drop_duplicates()

new_df

new_df.duplicated().sum()